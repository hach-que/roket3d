/*
 * This file was automatically generated by AutoBind.
 * Any changes made to this file will be lost when it
 * is next regenerated.
 */

#include "autobind/types.h"
#include "autobind/binding/lua.h"
#include "E.Unmanaged/Core/RColor.h"

namespace Engine { namespace Unmanaged { namespace Core
{
    /* Variable definitions */
    private double RColor::p_R;
    private double RColor::p_G;
    private double RColor::p_B;

    /* Method and constructor definitions */
    public RColor::RColor(lua_State * L, bool byuser)
    {

        this->p_R = 0;
        this->p_G = 0;
        this->p_B = 0;
    }

    private int RColor::GetG(lua_State * L)
    {

        return Bindings<numeric>::Result(this->p_G);
    }

    private int RColor::SetG(lua_State * L)
    {
        Bindings<numeric> value(L, 0);

        this->p_G = value;
    }

    public int RColor::SomeFunc(lua_State * L)
    {
        Bindings<RDevice> dev(L, 0);

        // We just use the RColor constructor to return one..
        RColor col = new RColor(1, 2, 3);
        return Bindings<void>::Result(col);
    }

    /* Automatic property getter-setter definitions */
    int RColor::__autobind_property_get_R(lua_State * L)
    {
        return Bindings<numeric>::Result(p_R);
    }

    int RColor::__autobind_property_set_R(lua_State * L)
    {
        p_R = Bindings<numeric>::GetArgument(L, -1);
        return Bindings<numeric>::EmptyResult;
    }

    int RColor::__autobind_property_get_B(lua_State * L)
    {
        return Bindings<numeric>::Result(p_B);
    }

    int RColor::__autobind_property_set_B(lua_State * L)
    {
        p_B = Bindings<numeric>::GetArgument(L, -1);
        return Bindings<numeric>::EmptyResult;
    }

} 
} 
} 

