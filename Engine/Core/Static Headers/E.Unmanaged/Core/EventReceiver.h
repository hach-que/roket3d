// This class handles all events that are generated by
// Irrlicht and physics engines.

#ifndef STATIC_EventReceiver
#define STATIC_EventReceiver

/* Imports */
namespace Engine { namespace Unmanaged { namespace Core { class REvent; } } } 
#include "E.Unmanaged/Core/REvent.h"
#include "Keycodes.h"
#include "IEventReceiver.h"
#include <map>

namespace Engine { namespace Unmanaged { namespace Core
{
    /* Begin class declaration */
	class EventReceiver : public irr::IEventReceiver
    {
        /* Variable declarations */
		private: std::map<Engine::Unmanaged::Core::REvent *, function> m_Handlers;
		private: bool m_PressedKeys[irr::KEY_KEY_CODES_COUNT];

        /* Method and constructor declarations */
        public: EventReceiver(lua_State * L);
        public: ~EventReceiver();
		public: virtual bool OnEvent(const irr::SEvent& event);
		public: virtual bool IsKeyDown(irr::EKEY_CODE key) const;
		public: void AddHandler(Engine::Unmanaged::Core::REvent *, function);
    };
} 
} 
}

#endif

