#import Engine.DivideByZeroException
#include "Irrlicht.h"
#include "vector3d.h"

class Engine.Collections.RVector3D
   as Engine.Collections.Vector3D
{
	private double p_X;
	private double p_Y;
	private double p_Z;
	private irr::core::vector3df m_Vector;

	/// <summary>
	/// The default constructor for an RVector3D object, initalizing
	/// the vector information to have a value of (0, 0, 0).
	/// </summary>
	bound RVector3D()
	{
		this->p_X = 0;
		this->p_Y = 0;
		this->p_Z = 0;
		this->m_Vector = irr::core::vector3df(0, 0, 0);
	}

	/// <summary>
	/// The recommended constructor for an RVector3D object, initalizing
	/// the vector information to have a value of (x, y, z).
	/// </summary>
	/// <param name="x">The X component.</param>
	/// <param name="y">The Y component.</param>
	/// <param name="z">The Z component.</param>
	bound RVector3D(numeric x, numeric y, numeric z)
	{
		this->p_X = x;
		this->p_Y = y;
		this->p_Z = z;
		this->m_Vector = irr::core::vector3df(x, y, z);
	}

	/// <summary>
	/// The X value of the vector.
	/// </summary>	
	bound property numeric X
	{
		get: call GetX;
		set: call SetX;
	}

	/// <summary>
	/// The Y value of the vector.
	/// </summary>
	bound property numeric Y
	{
		get: call GetY;
		set: call SetY;
	}

	/// <summary>
	/// The Z value of the vector.
	/// </summary>
	bound property numeric Z
	{
		get: call GetZ;
		set: call SetZ;
	}

	/// <summary>
	/// Returns the cross product of this vector and the specified vector.
	/// </summary>
	/// <param name="vec">The other vector to perform the cross product operation with.</param>
	bound RVector3D CrossProduct(RVector3D vec)
	{
		RVector3D * ret = Bindings<RVector3D>::CreateNew(L);
		irr::core::vector3df irrvec = this->m_Vector.crossProduct(vec->GetObject());
		ret->SetObject(irrvec);

		return ret;
	}

	/// <summary>
	/// The dot product between this and the specified vector.
	/// </summary>
	/// <param name="vec">The other vector to perform the dot product with.</param>
	bound numeric DotProduct(RVector3D vec)
	{
		return this->m_Vector.dotProduct(vec->GetObject());
	}

	/// <summary>
	/// Check whether this vector is equal to the specified vector.
	/// </summary>
	/// <param name="vec">The other vector to perform the comparison with.</param>
	bound bool Equals(RVector3D vec)
	{
		return this->m_Vector.equals(vec->GetObject());
	}

	/// <summary>
	/// Returns this vector as a table of 4 values.
	/// </summary>
	bound table GetAs4Values()
	{
		// TODO: Waiting on implementation of a Table class in the Lua Bindings class.
		return;
	}

	/// <summary>
	/// Retrieves the distance from this vector to the target vector.
	/// </summary>
	/// <param name="vec">The target vector.</param>
	bound numeric GetDistanceFrom(RVector3D vec)
	{
		return this->m_Vector.getDistanceFrom(vec->GetObject());
	}

	/// <summary>
	/// Retrieves the squared distance from this vector to the target vector.  This
	/// function is faster than GetDistanceFrom() as it does not have to perform the
	/// square root operation.
	/// </summary>
	/// <param name="vec">The target vector.</param>
	bound numeric GetDistanceFromSQ(RVector3D vec)
	{
		return this->m_Vector.getDistanceFromSQ(vec->GetObject());
	}

	/// <summary>
	/// Get the rotations that would make a (0,0,1) direction vector point in the
	/// same direction as this direction vector.
	/// </summary>
	bound RVector3D GetHorizontalAngle()
	{
		RVector3D * ret = Bindings<RVector3D>::CreateNew(L);
		irr::core::vector3df irrvec = this->m_Vector.getHorizontalAngle();
		ret->SetObject(irrvec);

		return ret;
	}

	/// <summary>
	/// Returns a vector interpolated between this vector and the target vector by
	/// the specified amount.
	/// </summary>
	/// <param name="vec">The target vector.</param>
	/// <param name="d">The amount to interpolate by.  This value should lie between 0 and 1.</param>
	bound RVector3D GetInterpolated(RVector3D vec, numeric d)
	{
		RVector3D * ret = Bindings<RVector3D>::CreateNew(L);
		irr::core::vector3df irrvec = this->m_Vector.getInterpolated(vec->GetObject(), d);
		ret->SetObject(irrvec);

		return ret;
	}

	/// <summary>
	/// Returns a vector quadratically interpolated between this vector and two other
	/// vectors by the specified amount.
	/// </summary>
	/// <param name="vec1">The first other vector.</param>
	/// <param name="vec2">The second other vector.</param>
	/// <param name="d">The amount to interpolate by.  This value should lie between 0 and 1.</param>
	bound RVector3D GetInterpolatedQuadratic(RVector3D vec1, RVector3D vec2, numeric d)
	{
		RVector3D * ret = Bindings<RVector3D>::CreateNew(L);
		irr::core::vector3df irrvec = this->m_Vector.getInterpolated_quadratic(vec1->GetObject(), vec2->GetObject(), d);
		ret->SetObject(irrvec);

		return ret;
	}

	/// <summary>
	/// The length of this vector.
	/// </summary>
	bound numeric GetLength()
	{
		return this->m_Vector.getLength();
	}

	/// <summary>
	/// The squared length of this vector.  This function is faster than GetLength()
	/// as it does not have to perform the square root operation.
	/// </summary>
	bound numeric GetLengthSQ()
	{
		return this->m_Vector.getLengthSQ();
	}

	/// <summary>
	/// Inverts this vector.
	/// </summary>
	bound void Invert()
	{
		this->m_Vector.invert();
		return;
	}

	/// <summary>
	/// Returns whether this vector lies between two other vectors.
	/// </summary>
	/// <param name="start">The start vector.</param>
	/// <param name="end">The end vector.</param>
	bound bool IsBetweenPoints(RVector3D start, RVector3D end)
	{
		return this->m_Vector.isBetweenPoints(start->GetObject(), end->GetObject());
	}

	/// <summary>
	/// Returns a normalized vector so that either X, Y or Z will be 1 with
	/// the other components a lower value (while maintaining the original ratio).
	/// </summary>
	bound RVector3D Normalize()
	{
		RVector3D * ret = Bindings<RVector3D>::CreateNew(L);
		irr::core::vector3df irrvec = this->m_Vector.normalize();
		ret->SetObject(irrvec);

		return ret;
	}

	/// <summary>
	/// Rotates the vector by a specified number of degrees around the Z axis and
	/// the specified center.
	/// </summary>
	/// <param name="degrees">The angle in degrees to rotate by.</param>
	/// <param name="center">The center of the rotation.</param>
	bound void RotateXYBy(numeric degrees, RVector3D center)
	{
		this->m_Vector.rotateXYBy(degrees, center->GetObject());
		return;
	}

	/// <summary>
	/// Rotates the vector by a specified number of degrees around the Y axis and
	/// the specified center.
	/// </summary>
	/// <param name="degrees">The angle in degrees to rotate by.</param>
	/// <param name="center">The center of the rotation.</param>
	bound void RotateXZBy(numeric degrees, RVector3D center)
	{
		this->m_Vector.rotateXZBy(degrees, center->GetObject());
		return;
	}

	/// <summary>
	/// Rotates the vector by a specified number of degrees around the X axis and
	/// the specified center.
	/// </summary>
	/// <param name="degrees">The angle in degrees to rotate by.</param>
	/// <param name="center">The center of the rotation.</param>
	bound void RotateYZBy(numeric degrees, RVector3D center)
	{
		this->m_Vector.rotateYZBy(degrees, center->GetObject());
		return;
	}

	/// <summary>
	/// Copies the values from the target vector into this one.
	/// </summary>
	/// <param name="other">The target vector.</param>
	bound void CopyFrom(RVector3D other)
	{
		this->m_Vector.set(other->GetObject());
		return;
	}

	/// <summary>
	/// Sets both the X and Y values.
	/// </summary>
	/// <param name="x">The X value.</param>
	/// <param name="y">The Y value.</param>
	bound void Set(numeric x, numeric y, numeric z)
	{
		this->m_Vector.set(x, y, z);
		return;
	}

	/// <summary>
	/// Sets the length of this vector, so that GetLength() would
	/// return the specified length value.
	/// </summary>
	/// <param name="length">The new length of the vector.</param>
	bound void SetLength(numeric length)
	{
		this->m_Vector.setLength(length);
		return;
	}

	/// <summary>
	/// Sets the Irrlicht object to the parameter 'obj'.
	/// </summary>
	/// <param>The new Irrlicht object to associate with this RVector3D instance.</param>
	unbound public void SetObject(irr::core::vector3df obj)
	{
		this->m_Vector = obj;
	}

	/// <summary>
	/// Gets the Irrlicht object that this instance represents.
	/// </summary>
	/// <returns>A copy of the Irrlicht object that this instance holds.</returns>
	unbound public irr::core::vector3df GetObject()
	{
		return this->m_Vector;
	}

	// Property handlers
	unbound void SetX(numeric value)
	{
		this->p_X = value;
		this->m_Vector.X = value;

		return;
	}

	unbound numeric GetX()
	{
		if ((float)this->p_X == this->m_Vector.X)
			return this->p_X;

		return this->m_Vector.X;
	}

	unbound void SetY(numeric value)
	{
		this->p_Y = value;
		this->m_Vector.Y = value;

		return;
	}

	unbound numeric GetY()
	{
		if ((float)this->p_Y == this->m_Vector.Y)
			return this->p_Y;

		return this->m_Vector.Y;
	}

	unbound void SetZ(numeric value)
	{
		this->p_Z = value;
		this->m_Vector.Z = value;

		return;
	}

	unbound numeric GetZ()
	{
		if ((float)this->p_Z == this->m_Vector.Z)
			return this->p_Z;

		return this->m_Vector.Z;
	}
}