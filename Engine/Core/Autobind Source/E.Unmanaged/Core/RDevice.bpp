#import Engine.Unmanaged.Core.EventReceiver
#import Engine.Unmanaged.GUI.RGUIEnvironment
#import Engine.Unmanaged.Video.RVideoDriver
#import Engine.Unmanaged.Scene.RSceneManager
#import Engine.Collections.RVector2D
#import Engine.GraphicsEngineNotFoundException
#import Engine.ObjectDisposedException
#include "dimension2d.h"
#include "IrrlichtDevice.h"
#include "IAudioManager.h"

class Engine.Unmanaged.Core.RDevice
   as Engine.Unmanaged.Core.Device
{
	private irr::IrrlichtDevice * m_Device;
	private cAudio::IAudioManager * m_Audio;
	private Engine::Unmanaged::Core::EventReceiver * m_Receiver;
	private int m_LastFPS;
	private int m_CurrentStep;
	private bool m_IsDeviceSet;
	// TODO: Add the physics manager declaration here.

	// Cached references to the wrapping classes.
	private int m_CachedVideoDriver;
	private int m_CachedGUIEnvironment;
	private int m_CachedSceneManager;

	/// <summary>
	/// The default constructor which takes a screen resolution argument
	/// and other information about the construction of the Irrlicht
	/// video device.
	/// </summary>
	/// <param name="size">The size of the window to create.</param>
	/// <param name="bits">The color bits, either 16 or 32.</param>
	/// <param name="fullscreen">Whether to make a fullscreen window.</param>
	/// <param name="stencil">Whether to use a stencil buffer.</param>
	/// <param name="vsync">Whether to ensure the refresh rate matches the vertical synchronization of the screen.</param>
	/// <exception>Engine.GraphicsEngineNotFoundException</exception>
	bound RDevice(Engine::Collections::RVector2D size, numeric bits, bool fullscreen, bool stencil, bool vsync)
	{
		irr::core::dimension2d<irr::u32> dimensions;
		dimensions.Width = size->GetObject().X;
		dimensions.Height = size->GetObject().Y;

		this->m_IsDeviceSet = false;
		this->m_CachedVideoDriver = -1;
		this->m_CachedGUIEnvironment = -1;
		this->m_CachedSceneManager = -1;

		// Create the event receiver.
		this->m_Receiver = new Engine::Unmanaged::Core::EventReceiver(L);

		// Attempt to initalize the device.
		this->m_Device = irr::createDevice(
			irr::video::EDT_OPENGL,
			dimensions,
			bits,
			fullscreen,
			stencil,
			vsync,
			this->m_Receiver
			);

		if (this->m_Device == NULL)
		{
			delete this->m_Receiver;
			throw new Engine::GraphicsEngineNotFoundException();
		}

		this->m_IsDeviceSet = true;

		// Create the audio and physics devices.
		this->m_Audio = cAudio::getAudioManager();
	}

	bound void Close()
	{
		if (this->m_IsDeviceSet)
		{
			this->m_IsDeviceSet = false;
			this->m_Device->closeDevice();
			this->m_Device = NULL;

			if (this->m_CachedVideoDriver != NULL)
			{
				Bindings<Engine::Unmanaged::Video::RVideoDriver>::CacheDelete(L, this->m_CachedVideoDriver);
				this->m_CachedVideoDriver = -1;
			}
			if (this->m_CachedGUIEnvironment != NULL)
			{
				Bindings<Engine::Unmanaged::GUI::RGUIEnvironment>::CacheDelete(L, this->m_CachedGUIEnvironment);
				this->m_CachedGUIEnvironment = -1;
			}

			// Cleanup the event receiver.
			delete this->m_Receiver;
			this->m_Receiver = NULL;

			return;
		}
		else
			throw new Engine::ObjectDisposedException();
	}

	bound void Bind(Engine::Unmanaged::Core::REvent event, function handler)
	{
		if (this->m_IsDeviceSet)
		{
			this->m_Receiver->AddHandler(event, handler);

			return;
		}
		else
			throw new Engine::ObjectDisposedException();
	}

	/// <summary>
	/// The current GUI environment.
	/// </summary>
	/// <readonly>true</readonly>
	/// <exception>Engine.ObjectDisposedException</exception>
	bound property Engine::Unmanaged::GUI::RGUIEnvironment GUIEnvironment
	{
		get: call GetGUIEnvironment;
	}

	/// <summary>
	/// The current video driver.
	/// </summary>
	/// <readonly>true</readonly>
	/// <exception>Engine.ObjectDisposedException</exception>
	bound property Engine::Unmanaged::Video::RVideoDriver VideoDriver
	{
		get: call GetVideoDriver;
	}

	/// <summary>
	/// The current scene manager.
	/// </summary>
	/// <readonly>true</readonly>
	/// <exception>Engine.ObjectDisposedException</exception>
	bound property Engine::Unmanaged::Scene::RSceneManager SceneManager
	{
		get: call GetSceneManager;
	}

	/// <summary>
	/// Whether the device is currently running.  When this property is
	/// accessed, the internal device->Run() function is called, progressing
	/// engine execution.  Therefore, this property should be used in a
	/// while loop like so:
	/// <code>
	/// device = Engine.Unmanaged.Core.Device(...)
	/// while (device.Running) do
	///     device.VideoDriver.BeginScene(...)
	///     device.SceneManager.DrawAll()
	///     device.VideoDriver.EndScene()
	/// end
	/// </code>
	/// </summary>
	/// <readonly>true</readonly>
	/// <exception>Engine.ObjectDisposedException</exception>
	bound property bool Running
	{
		get: call GetRunning;
	}

	// Property functions
	unbound Engine::Unmanaged::GUI::RGUIEnvironment GetGUIEnvironment()
	{
		if (this->m_CachedGUIEnvironment == -1)
		{
			Engine::Unmanaged::GUI::RGUIEnvironment * env =
				Bindings<Engine::Unmanaged::GUI::RGUIEnvironment>::CreateNew(L);
			env->SetObject(this->m_Device->getGUIEnvironment());

			this->m_CachedGUIEnvironment =
				Bindings<Engine::Unmanaged::GUI::RGUIEnvironment>::CacheStore(L);

			return env;
		}
		else
		{
			return Bindings<Engine::Unmanaged::GUI::RGUIEnvironment>::CacheRetrieve(L, this->m_CachedGUIEnvironment);
		}
	}

	unbound Engine::Unmanaged::Video::RVideoDriver GetVideoDriver()
	{
		if (this->m_CachedVideoDriver == -1)
		{
			Engine::Unmanaged::Video::RVideoDriver * drv =
				Bindings<Engine::Unmanaged::Video::RVideoDriver>::CreateNew(L);
			drv->SetObject(this->m_Device->getVideoDriver());

			this->m_CachedVideoDriver =
				Bindings<Engine::Unmanaged::Video::RVideoDriver>::CacheStore(L);

			return drv;
		}
		else
		{
			return Bindings<Engine::Unmanaged::Video::RVideoDriver>::CacheRetrieve(L, this->m_CachedVideoDriver);
		}
	}

	unbound Engine::Unmanaged::Scene::RSceneManager GetSceneManager()
	{
		if (this->m_CachedSceneManager == -1)
		{
			Engine::Unmanaged::Scene::RSceneManager * drv =
				Bindings<Engine::Unmanaged::Scene::RSceneManager>::CreateNew(L);
			drv->SetObject(this->m_Device->getSceneManager());

			this->m_CachedSceneManager =
				Bindings<Engine::Unmanaged::Scene::RSceneManager>::CacheStore(L);

			return drv;
		}
		else
		{
			return Bindings<Engine::Unmanaged::Scene::RSceneManager>::CacheRetrieve(L, this->m_CachedSceneManager);
		}
	}

	unbound bool GetRunning()
	{
		return (this->m_IsDeviceSet && this->m_Device->run());
	}
}