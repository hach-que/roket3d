#import Engine.InternalConstructorOnlyException
#import Engine.ObjectDisposedException
#import Engine.Collections.RColor
#import Engine.Collections.RVector2D
#import Engine.Collections.RLine2D
#import Engine.Collections.RRectangle
#include "IVideoDriver.h"

class Engine.Unmanaged.Video.RVideoDriver
   as Engine.Unmanaged.Video.Driver
{
	private irr::video::IVideoDriver * m_Driver;
	private bool m_IsDriverSet;

	/// <summary>
	/// A non-public constructor for initalizing an RVideoDriver instance.
	/// </summary>
	/// <internal>true</internal>
	/// <exception>Engine::InternalConstructorOnlyException</exception>
	bound RVideoDriver()
	{
		if (byuser)
		{
			throw new Engine::InternalConstructorOnlyException();
		}
		this->m_IsDriverSet = false;
		this->m_Driver = NULL;
	}

	/// <summary>
	/// Clears the screen with the specified background color, ready for
	/// rendering of GUI and Scene objects.
	/// </summary>
	/// <param name="backcolor">The background color.</param>
	/// <param name="backbuffer">Whether the back-buffer should be used.</param>
	/// <param name="zbuffer">Whether a z-buffer should be used in rendering.</param>
	/// <exception>Engine::ObjectDisposedException</exception>
	bound void BeginScene(Engine::Collections::RColor backcolor, bool backbuffer, bool zbuffer)
	{
		if (this->m_IsDriverSet)
		{
			this->m_Driver->beginScene(backbuffer, zbuffer, backcolor->GetObject());
			return;
		}
		else
			throw new Engine::ObjectDisposedException();
	}

	/// <summary>
	/// Places the contents of the screen buffer onto the actual screen.
	/// </summary>
	/// <exception>Engine::ObjectDisposedException</exception>
	bound void EndScene()
	{
		if (this->m_IsDriverSet)
		{
			this->m_Driver->endScene();
			return;
		}
		else
			throw new Engine::ObjectDisposedException();
	}

	/// <summary>
	/// Draws a 2D line on the screen.
	/// </summary>
	/// <param name="line">The line defined as a 2D ray.</param>
	/// <param name="color">The color of the line.</param>
	/// <exception>Engine::ObjectDisposedException</exception>
	bound void Draw2DLine(Engine::Collections::RLine2D line, Engine::Collections::RColor color)
	{
		if (this->m_IsDriverSet)
		{
			irr::core::line2d<int> irrline = line->GetObjectAsIntLine();
			this->m_Driver->draw2DLine(
				irr::core::position2d<int>(irrline.start.X, irrline.start.Y),
				irr::core::position2d<int>(irrline.end.X, irrline.end.Y),
				color->GetObject()
				);
			return;
		}
		else
			throw new Engine::ObjectDisposedException();
	}

	/// <summary>
	/// Draws a 2D rectangle on the screen.
	/// </summary>
	/// <param name="rect">The 2D rectangle.</param>
	/// <param name="color">The color of the rectangle.</param>
	/// <exception>Engine::ObjectDisposedException</exception>
	bound void Draw2DRectangle(Engine::Collections::RRectangle rect, Engine::Collections::RColor color)
	{
		if (this->m_IsDriverSet)
		{
			this->m_Driver->draw2DRectangle(color->GetObject(), rect->GetObjectAsIntRect());
			return;
		}
		else
			throw new Engine::ObjectDisposedException();
	}

	/// <summary>
	/// Sets the Irrlicht object to the parameter 'obj'.
	/// </summary>
	/// <param name="obj">The new Irrlicht object to associate with this RVideoDriver instance.</param>
	unbound public void SetObject(irr::video::IVideoDriver * obj)
	{
		this->m_IsDriverSet = (obj != NULL);
		this->m_Driver = obj;
	}

	/// <summary>
	/// Gets the Irrlicht object that this instance represents.
	/// </summary>
	/// <returns>The Irrlicht object that this instance holds.</returns>
	unbound public irr::video::IVideoDriver * GetObject()
	{
		return this->m_Driver;
	}
}