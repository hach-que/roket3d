#import Engine.Unmanaged.Scene.RSceneNode
#import Engine.Collections.RVector3D
#import Engine.InternalConstructorOnlyException
#import Engine.ObjectDisposedException
#include "ICameraSceneNode.h"

class Engine.Unmanaged.Scene.RSceneCamera : Engine.Unmanaged.Scene.RSceneNode
   as Engine.Unmanaged.Scene.Camera
{
	private irr::scene::ICameraSceneNode * m_CameraNode;
	private bool m_IsCameraNodeSet;

	/// <summary>
	/// A non-public constructor for initalizing an RSceneCamera instance.
	/// </summary>
	/// <internal>true</internal>
	/// <exception>Engine::InternalConstructorOnlyException</exception>
	bound RSceneCamera()
	{
		if (byuser)
		{
			throw new Engine::InternalConstructorOnlyException();
		}
		this->m_IsCameraNodeSet = false;
		this->m_CameraNode = NULL;
	}

	/// <summary>
	/// Clears the current Irrlicht object.  Virtual so that derived classes
	/// can set the pre-casted values to NULL (in case SetObject isn't of the
	/// same type).
	/// </summary>
	unbound public virtual void ClearObject()
	{
		this->m_IsNodeSet = false;
		this->m_IsCameraNodeSet = false;
		this->m_Node = NULL;
		this->m_CameraNode = NULL;
	}

	/// <summary>
	/// Sets the Irrlicht object to the parameter 'obj'.
	/// </summary>
	/// <param name="obj">The new Irrlicht object to associate with this RSceneCamera instance.</param>
	unbound public void SetObject(irr::scene::ICameraSceneNode * obj)
	{
		this->m_IsNodeSet = (obj != NULL);
		this->m_IsCameraNodeSet = (obj != NULL);
		this->m_Node = obj;
		this->m_CameraNode = obj;
	}

	/// <summary>
	/// Gets the Irrlicht object that this instance represents.
	/// </summary>
	/// <returns>The Irrlicht object that this instance holds.</returns>
	unbound public irr::scene::ICameraSceneNode * GetObject()
	{
		return this->m_CameraNode;
	}

	/// <summary>
	/// The position the camera is looking at.
	/// </summary>
	/// <readonly>true</readonly>
	/// <exception>Engine.ObjectDisposedException</exception>
	bound property Engine::Collections::RVector3D LookAt
	{
		get: call GetLookAt;
	}

	// Property functions
	unbound Engine::Collections::RVector3D GetLookAt()
	{
		if (this->m_IsCameraNodeSet)
		{
			Engine::Collections::RVector3D * ret = Bindings<Engine::Collections::RVector3D>::CreateNew(L);
			ret->SetObject(this->m_CameraNode->getTarget());
			return ret;
		}
		else
			throw new Engine::ObjectDisposedException();
	}
}