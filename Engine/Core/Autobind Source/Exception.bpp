#include <string>
#include <vector>
#include "Utility.h"

class Engine.Exception
{
	public static const char* Message = "A general exception was raised.";
	public int LineNumber;
	public std::string FileName;
	public std::vector<std::string> Arguments;

	/// <summary>
	/// Exception constructor for C++ code.
	/// </summay>
	unbound public Exception()
	{
	}

	/// <summary>
	/// Exception constructor for Lua code.
	/// </summary>
	bound Exception()
	{
	}

	/// <summary>
	/// A function which parses the static Message variable according
	/// to the arguments in the Arguments vector.
	/// <summary>
	unbound public static std::string GetParsedMessage(std::string msg, std::vector<std::string> args)
	{
		std::string ret = msg;
		for (unsigned int i = 0; i < args.size(); i++)
		{
			std::stringstream from;
			from << "${" << (i + 1) << "}";
			ret = Roket3D::Utility::ReplaceAll(ret, from.str(), args[i]);
		}
		return ret;
	}

	/// <summary>
	/// Returns the static Message variable.  Required for downcasting.
	/// <summary>
	unbound public virtual const char* GetMessage()
	{
		return this->Message;
	}

	/// <summary>
	/// Returns the static ClassName variable.  Required for downcasting.
	/// <summary>
	unbound public virtual const char* GetName()
	{
		return this->ClassName;
	}

	/// <summary>
	/// A property to access the exception message.
	/// </summary>
	bound property string Message
	{
		get: call GetMessageL;
		set: call SetMessageL;
	}

	unbound ::string GetMessageL()
	{
		return Engine::Exception::GetParsedMessage(this->Message, this->Arguments).c_str();
	}

	unbound void SetMessageL(::string value)
	{
		throw Engine::ReadOnlyPropertyException();
	}
}