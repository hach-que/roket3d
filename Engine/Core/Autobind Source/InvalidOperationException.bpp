#import Engine.InterpreterException

class Engine.InvalidOperationException : Engine.InterpreterException
{
	public static const char* Message = "The Lua interpreter attempted to perform an operation on two objects where neither of them defined a metamethod for the operation attempted.";

	/// <summary>
	/// Exception constructor for C++ code.
	/// </summay>
	unbound public InvalidOperationException()
	{
	}

	/// <summary>
	/// Exception constructor for Lua code.
	/// </summary>
	bound InvalidOperationException()
	{	
	}

	/// <summary>
	/// Returns the static Message variable.  Required for downcasting.
	/// <summary>
	unbound public virtual const char* GetMessage()
	{
		return this->Message;
	}

	/// <summary>
	/// Returns the static ClassName variable.  Required for downcasting.
	/// <summary>
	unbound public virtual const char* GetName()
	{
		return this->ClassName;
	}

	/// <summary>
	/// A property to access the exception message.
	/// </summary>
	bound property string Message
	{
		get: call GetMessageL;
		set: call SetMessageL;
	}

	unbound ::string GetMessageL()
	{
		return Engine::Exception::GetParsedMessage(this->Message, this->Arguments).c_str();
	}

	unbound void SetMessageL(::string value)
	{
		throw new Engine::ReadOnlyPropertyException();
	}
}